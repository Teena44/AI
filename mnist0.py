# -*- coding: utf-8 -*-
"""MNIST0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYSErq13OFtAAD1D_nArZdsUXVd4w_8x
"""

!pip install tensorflow keras numpy mnist matplotlib

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.14

import numpy as np
import mnist 
import matplotlib.pyplot as plt
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras import Sequential
from keras.utils import to_categorical

train_images = mnist.train_images() #training data images
train_labels = mnist.train_labels() #training data labels
test_images = mnist.test_images() #testin dtaa images
test_labels = mnist.test_labels() #testing data labels

plt.imshow(train_images[0])

#Normalize pixel values [1-255] to [-0.5, 0.5] to make the network easier to train
train_images = (train_images/255) - 0.5
test_images = (test_images/255)-0.5
#flatten the images of size 28x28
train_images = train_images.reshape((-1, 784))
test_images = test_images.reshape((-1, 784))
print(train_images.shape)
print(test_images.shape)

#build the model
#3 layers, 2 layers with 64 neurons and the relu function 
#1 layer with 10 neurons and softmax function
model = Sequential()
model.add(Dense(64, activation = 'relu', input_dim=784))
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

#compile the model
#Loss function is improved using optimizer
model.compile(
    optimizer='adam',
    loss = 'categorical_crossentropy',
    metrics = ['accuracy']
)

model.fit(train_images, to_categorical(train_labels), epochs = 5, batch_size=32)

#evaluate the model
model.evaluate(test_images, to_categorical(test_labels))

predictions = model.predict(test_images[:5])
# print(predictions)
print(np.argmax(predictions, axis = 1))
print(test_labels[:5])

for i in range(0,5):
  first_image = test_images[i]
  first_image = np.array(first_image, dtype='float')
  pixels = first_image.reshape((28, 28))
  plt.imshow(pixels, cmap = 'gray')
  plt.show()